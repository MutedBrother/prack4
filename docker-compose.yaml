version: '3.8'

networks:
  tg_bot_network:
    driver: bridge

services:
  bot:
    container_name: bot
    build: bot
    env_file: .env
    networks:
      tg_bot_network:
    depends_on:
      - db
      - db_repl

  db:
    container_name: db
    hostname: db
    build: db
    user: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c max_wal_senders=10 
      -c listen_addresses='*'
      -c log_replication_commands=on
      -c wal_log_hints=on
      -c logging_collector='on' 
      -c log_directory='/tmp/' 
      -c log_filename='postgresql.log'
      -c log_file_mode=0640
    volumes:
      - /tmp/:/tmp/
    networks:
      tg_bot_network:

  db_repl:
    container_name: db_repl
    hostname: db_repl
    build: db_repl
    user: postgres
    restart: always
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=${DB_HOST} --port=${DB_PORT}
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    networks:
      tg_bot_network:
    depends_on:
      - db
