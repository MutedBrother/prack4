- hosts: db
  vars_files:
    - vars.yml
  tasks:
    - name: Install PostgreSQL dependencies
      become: yes
      apt:
        pkg:
          - git
          - bash
          - openssl
          - libssl-dev
          - libssl-doc
      state: latest
      update_cache: true

    - name: Install PostgreSQL
      become: yes
      apt:
        pkg:
          - postgresql
          - postgresql-contrib
          - libpq-dev
          - python3-psycopg2
      state: latest
      update_cache: true

    - name: Create database
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{ DB_DATABASE }}"
        state: present

    - name: Change PostgreSQL database user
      become: yes
      become_user: postgres
      postgresql_user:
        db: "{{ DB_DATABASE }}"
        name: postgres
        password: "{{ DB_PASSWORD }}"

    - name: Set PostgreSQL parameters
      become: yes
      become_user: postgres
      community.postgresql.postgresql_set:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
      with_dict:
        listen_addresses: "*"
        wal_level: "replica"
        max_wal_senders: "10"
        log_replication_commands: "on"
        wal_log_hints: "on"
        logging_collector: "on"
        log_directory: "/tmp/"
        log_filename: "postgresql.log"

    - name: Allow replication in pg_hba
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "host"
        databases: "replication"
        users: "all"
        source: "0.0.0.0/0"
        method: "md5"
        create: true

    - name: Allow bot access in pg_hba
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "host"
        databases: "all"
        users: "all"
        source: "0.0.0.0/0"
        method: "md5"
        create: true

    - name: Copy init.sql file
      copy:
        src: "init.sql"
        dest: "~/init.sql"

    - name: Read init.sql file
      slurp:
        src: init.sql
      register: init

    - name: Initialize database from init.sql file
      become: yes
      become_user: postgres
      postgresql_query:
        db: "{{ DB_DATABASE }}"
        query: "{{ init.content | b64decode }}"
        login_user: postgres
        login_password: "{{ DB_PASSWORD }}"

    - name: Restart PostgreSQL
      become: yes
      service:
        name: postgresql
        state: restarted
      environment:
        POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
        POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"

    - name: Set permissions for postgresql.log file
      become: yes
      file:
        path: /tmp/postgresql.log
        mode: 0664

- hosts: db_repl
  vars_files:
    - vars.yml
  tasks:
    - name: Install PostgreSQL dependencies
      become: yes
      apt:
        pkg:
          - bash
          - openssl
          - libssl-dev
          - libssl-doc
      state: latest
      update_cache: true

    - name: Install PostgreSQL
      become: yes
      apt:
        pkg:
          - postgresql
          - postgresql-contrib
          - libpq-dev
          - python3-psycopg2
      state: latest
      update_cache: true

    - name: Start PostgreSQL
      become: yes
      service:
        name: postgresql
        state: started

    - name: Set PostgreSQL parameters
      become_user: postgres
      become: yes
      community.postgresql.postgresql_set:
        name: "listen_addresses"
        value: "*"

    - name: Stop PostgreSQL
      become: yes
      service:
        name: postgresql
        state: stopped

    - name: Remove PostgreSQL directory
      become: yes
      file:
        path: /var/lib/postgresql/data/
        state: absent

    - name: Try pg_basebackup
      become: yes
      become_user: postgres
      retries: 5
      delay: 5
      register: result
      until: result.rc == 0
      environment:
        PGUSER: "{{ DB_REPL_USER }}"
        PGPASSWORD: "{{ DB_REPL_PASSWORD }}"
      shell: pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host="{{ DB_HOST }}" --port="{{ DB_PORT }}"

    - name: Start PostgreSQL
      become: yes
      service:
        name: postgresql
        state: started

- hosts: db
  tasks:
    - name: Install apt dependencies
      become: yes
      apt:
        name:
          - libpq-dev
          - gcc
          - musl-dev
          - python3-pip
        state: latest
        update_cache: true

    - name: Create directory for project
      become: yes
      ansible.builtin.file:
        path: /usr/bot_project/
        state: directory

    - name: Git clone
      become: yes
      ansible.builtin.git:
        repo: "https://github.com/MutedBrother/prack4/"
        dest: "/usr/bot_project/"
        version: docker

    - name: Install Python dependencies
      become: yes
      pip:
        requirements: "/usr/bot_project/bot/requirements.txt"

    - name: Copy .env file
      become: yes
      copy:
        src: ".env"
        dest: "/usr/bot_project/bot/.env"

    - name: Start bot
      become: yes
      command: "python3 /usr/bot_project/bot/bot.py"
